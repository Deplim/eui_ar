# EuiRyeong Jeong (wjddmflud@gmail.com, https://github.com/Deplim)
# 2020 Dev-Matching 웹 백엔드 개발자(상반기) 3번.py
# 8자리 숫자 배열이 주어졌을 때 각 옆자리의 차가 k 이하가 되게 하는 최소한의 교환횟수를 찾아라.



'''
비연결, greedy, 선택에 의한 이후 선택지의 변화
동적 프로그래밍 x, 알맞은 목표상태와 점수의 기준을 찾아야 함.
목표상태와 원소교환에 의한 상태변화를 어떻게 설명하는게 좋은가 ?
시점을 바꿔보자
정렬상태로 바꾸는게 최소로 필요한 교환횟수의 "최대"
어떤 상태이던 최대 8번 교환 안에 만들 수 있음.
>>
최소한의 원소 교환을 옆자리를 일정 차이 이내로 ! (8자리)

수학적인 규칙으로 최소한의 교환을 찾는게 아닌
경우의 수를 펼쳐서 찾는다 ?

항상 최선의 경우를 구해줄 수 있는 규칙이 없다는 것을 증명할 수 있는가?
재귀함수 : 최대 8번 들어갈 수 있음
>계산을 너무 많이해야 함 28^8

재귀함수를 쓴다고 해도 기본적으로 선택지를 줄여줘야함.
최소 8번 옮겨야지만 해결할 수 있는 경우가 진짜로 있는가 ?

*냅섹문제에 대하여 생각한 것들
무게제한이 있는 가방에 물건을 담아 가격의 총합을 가장 크게 하기 >

가격이 큰 물건부터 담는다 >
가방에 담은 각 물건의 가격을 a(n) 이라고 하면
가격의 총합은  " average(a(n)) * n "  으로 표현할 수 있다.
그러나 가장 가격이 큰 물건부터 담는다는 사실만으로는 a(n) 의 평균가격이 크다는것도 보장할 수 없고
무엇보다  물건의 갯수  n 이 알 수 없는 영역이 되므로 안됨.

무게 대비 가격 효율이 큰 물건부터 담는다 >



'''

